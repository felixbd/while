* while

Parser and interpreter for the While programming language

[[https://github.com/felixbd/while/actions/workflows/ci-test.yml/badge.svg?branch=main]]


** usage

*** example

#+begin_src shell
felix in ~/git-repos/hub/while on main Î» stack run

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

[READING .WHILE FILE] "./examples/simple.while"
[MetaToken {getLineNumber = 1, getToken = VarToken {getVarName = "x_1"}},
 MetaToken {getLineNumber = 1, getToken = AssignToken},
 MetaToken {getLineNumber = 1, getToken = ConstToken {getConstInt = 10}},
 MetaToken {getLineNumber = 1, getToken = SemicolonToken},
 MetaToken {getLineNumber = 2, getToken = VarToken {getVarName = "x_2"}},
 MetaToken {getLineNumber = 2, getToken = AssignToken},
 MetaToken {getLineNumber = 2, getToken = ConstToken {getConstInt = 0}},
 MetaToken {getLineNumber = 2, getToken = SemicolonToken},
 MetaToken {getLineNumber = 4, getToken = WhileToken},
 MetaToken {getLineNumber = 4, getToken = VarToken {getVarName = "x_1"}},
 MetaToken {getLineNumber = 4, getToken = NotEqualToken},
 MetaToken {getLineNumber = 4, getToken = ConstToken {getConstInt = 0}},
 MetaToken {getLineNumber = 4, getToken = DoToken},
 MetaToken {getLineNumber = 5, getToken = VarToken {getVarName = "x_1"}},
 MetaToken {getLineNumber = 5, getToken = AssignToken},
 MetaToken {getLineNumber = 5, getToken = VarToken {getVarName = "x_1"}},
 MetaToken {getLineNumber = 5, getToken = MinusToken},
 MetaToken {getLineNumber = 5, getToken = ConstToken {getConstInt = 1}},
 MetaToken {getLineNumber = 5, getToken = SemicolonToken},
 MetaToken {getLineNumber = 6, getToken = LoopToken},
 MetaToken {getLineNumber = 6, getToken = VarToken {getVarName = "x_1"}},
 MetaToken {getLineNumber = 6, getToken = DoToken},
 MetaToken {getLineNumber = 6, getToken = VarToken {getVarName = "x_2"}},
 MetaToken {getLineNumber = 6, getToken = AssignToken},
 MetaToken {getLineNumber = 6, getToken = VarToken {getVarName = "x_2"}},
 MetaToken {getLineNumber = 6, getToken = PlusToken},
 MetaToken {getLineNumber = 6, getToken = VarToken {getVarName = "x_1"}},
 MetaToken {getLineNumber = 6, getToken = EndToken},
 MetaToken {getLineNumber = 7, getToken = EndToken}]

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

Sequential
	(Assignment "x_1" (Constant {getConst = 10}))
	(Sequential
		(Assignment "x_2" (Constant {getConst = 0}))
		(While
			(Neq (Variable {getVar = "x_1"}) (Constant {getConst = 0}))
				(Sequential
					(Assignment "x_1" (Subtract (Variable {getVar = "x_1"}) (Constant {getConst = 1})))
					(Loop
						(Variable {getVar = "x_1"})
						(Assignment "x_2" (Add (Variable {getVar = "x_2"}) (Variable {getVar = "x_1"})))))))

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

[OUTPUT]:
[("x_2",285),("x_1",0)]

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
#+end_src

*** compile

#+begin_src shell
stack build
#+end_src


*** run

#+begin_src shell
stack run
#+end_src


*** test

#+begin_src shell
stack test
#+end_src


*** linting

#+begin_src shell
stack exec hlint src/*.hs app/*.hs test/*.hs
#+end_src


** requirements

*** [[https://docs.haskellstack.org/en/stable/][Haskell Tool Stack]]

#+begin_src shell
curl -SL https://get.haskellstack.org/ | sh
#+end_src

#+begin_example
Pro tip: you should look at the file before you run it
#+end_example


*** [[https://www.haskell.org/ghc/][Glasgow Haskell Compiler]]

#+begin_src shell
apt install ghc
#+end_src

#+begin_example
Pro tip: GHC has a interactive shell called `ghci`

- `:e` for edit
- `:l filename` for loading files
- `:r` for reloading
- etc.
#+end_example


*** [[https://github.com/ndmitchell/hlint#readme][HLint]]

#+begin_src shell
apt install hlint
#+end_src


** LICENSE (BSD-3-Clause)

#+begin_src shell :exports both :results output
cat ./LICENSE
#+end_src

#+RESULTS:
#+begin_example
Copyright Felix Drees (c) 2023

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

    ,* Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.

    ,* Redistributions in binary form must reproduce the above
      copyright notice, this list of conditions and the following
      disclaimer in the documentation and/or other materials provided
      with the distribution.

    ,* Neither the name of Felix Drees nor the names of other
      contributors may be used to endorse or promote products derived
      from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#+end_example
